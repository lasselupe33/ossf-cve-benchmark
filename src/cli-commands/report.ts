import { UserError } from "../util";
import ExploreServer from "../../contrib/reports/explore-server/src/server";
import * as reports from "../../contrib/reports/flat-files/src";
import * as bcvesFromCLI from "../bcves-from-cli";
import { Config, ToolID } from "../persistent-types";

export default async (
  config: Config,
  args: {
    import?: string;
    selectors: string[];
    tool: ToolID[];
    no_sources: boolean;
    allow_incomplete: boolean;
    port: number;
    anonymize: boolean;
    kind: string;
    non_fatal_validation_errors: boolean;
  }
) => {
  let bcves = await bcvesFromCLI.getBCVEsWithRuns(config, args, false);
  switch (args.kind) {
    case "txt": {
      return await reports.reportMaker(
        bcves,
        config.reports,
        reports.Format.txt
      );
    }
    case "server": {
      return await new ExploreServer(bcves, process.env["SERVER_PORT"] ? Number(process.env["SERVER_PORT"]) : 8080).start();
    }
    default:
      throw new UserError(`Unhandled report kind: ${args.kind}`);
  }
};
